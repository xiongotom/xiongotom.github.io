(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{154:function(_,v,i){"use strict";i.r(v);var l=i(0),t=Object(l.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var _=this,v=_.$createElement,i=_._self._c||v;return i("div",{staticClass:"content"},[i("h1",{attrs:{id:"unix哲学基础"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#unix哲学基础","aria-hidden":"true"}},[_._v("#")]),_._v(" Unix哲学基础")]),_._v(" "),i("h2",{attrs:{id:"《unix编辑艺术》读书笔记"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#《unix编辑艺术》读书笔记","aria-hidden":"true"}},[_._v("#")]),_._v(" "),i("em",[_._v("《UNIX编辑艺术》读书笔记")])]),_._v(" "),i("h2",{attrs:{id:"【声明】读书笔记包括原文摘抄和个人思考心得，原文一切版权归本书作者所有"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#【声明】读书笔记包括原文摘抄和个人思考心得，原文一切版权归本书作者所有","aria-hidden":"true"}},[_._v("#")]),_._v(" "),i("em",[_._v("【声明】读书笔记包括原文摘抄和个人思考心得，原文一切版权归本书作者所有")])]),_._v(" "),i("blockquote",[i("p",[_._v("一个程序只做一件事情，并做好。程序要能协作。程序要能处理文本流，因为这是最通用的接口。")])]),_._v(" "),i("p",[_._v("Doug McIlroy（Unix管道的发明人、Unix传统奠基人之一）的概述：")]),_._v(" "),i("ol",[i("li",[_._v("让每个程序就做好一件事。如果有新任务，就重新开始，不要往原程序中加入新功能而搞得复杂。")]),_._v(" "),i("li",[_._v("假定每个程序的输出都会成为另一个程序的输入，哪怕那个程序还是未知的。输出中不要有无关的信息干扰。避免使用严格的分栏格式和二进制格式输入。不要坚持使用交互式输入")]),_._v(" "),i("li",[_._v("尽可能早地将设计和编译的软件投入试用，哪怕是操作系统也不例外，理想情况下，应该是在几星期内。对拙劣的代码别犹豫，扔掉重写。")]),_._v(" "),i("li",[_._v("优先使用工具而不是拙劣的帮助来减轻编程任务的负担。工欲善其事必先利其器")])]),_._v(" "),i("p",[_._v("Rob Pike（最伟大的C语言大师之一）的概述：")]),_._v(" "),i("ol",[i("li",[_._v("【不要过早优化】你无法断定程序会在什么地方耗费运行时间。瓶颈经常出现在想不到的地方，所以别急于胡乱找个地方改代码，除非你已经证实那儿就是瓶颈所在。")]),_._v(" "),i("li",[_._v("【还是不要过早优化】估量。在你没对代码进行估量，特别是没找到最耗时的那部分之前，别去优化速度。")]),_._v(" "),i("li",[_._v("花哨的算法在n很小时通常很慢，而n通常很小。花哨的算法的常数复杂度很大，除非你确定n总是很大，否则不要用花哨算法（即使n很大，也优先考虑原则2）。")]),_._v(" "),i("li",[_._v("花哨的算法比简单的算法更容易出bug、更难实现。尽量使用简单的算法配合简单的数据结构 — 拿不准就穷举")]),_._v(" "),i("li",[_._v("数据压倒一切。如果已经选择了正确的数据结构并且把一切都组织的井井有条，正确的算法也就不言自明。编程的核心是数据结构，而不是算法。")]),_._v(" "),i("li",[_._v("没有原则6。")])]),_._v(" "),i("p",[_._v("原则概括：")]),_._v(" "),i("ol",[i("li",[_._v("模块原则：使用简洁的接口拼合简单的部件。")]),_._v(" "),i("li",[_._v("清晰原则：清晰胜于机巧。")]),_._v(" "),i("li",[_._v("组合原则：设计时考虑拼接组合。")]),_._v(" "),i("li",[_._v("分离原则：策略同机制分离，接口同引擎分离。")]),_._v(" "),i("li",[_._v("简洁原则：设计要简洁，复杂度能低就低。")]),_._v(" "),i("li",[_._v("吝啬原则：除非确无他法，不要编写庞大的程序。")]),_._v(" "),i("li",[_._v("透明性原则：设计要可见，以便审查和调试。")]),_._v(" "),i("li",[_._v("健壮原则：健壮源于透明和简洁。")]),_._v(" "),i("li",[_._v("表示原则：把知识叠入数据以求逻辑质朴而健壮（"),i("em",[_._v("不是很理解")]),_._v("）。")]),_._v(" "),i("li",[_._v("通俗原则：接口设计避免标新立异。")]),_._v(" "),i("li",[_._v("缄默原则：如果一个程序没什么好说的，就沉默。")]),_._v(" "),i("li",[_._v("补救原则：出现异常时，马上退出并给出足够的错误信息。")]),_._v(" "),i("li",[_._v("经济原则：宁花机器一分，不花程序员一秒。")]),_._v(" "),i("li",[_._v("生成原则：避免手工hack，尽量编写程序去生成程序。")]),_._v(" "),i("li",[_._v("优化原则：雕琢前先要有原型，跑之前先学会走。")]),_._v(" "),i("li",[_._v("多样原则：决不相信所谓“不二法门”的断言。")]),_._v(" "),i("li",[_._v("拓展原则：设计着眼未来，未来总比预想来得快。")])]),_._v(" "),i("p",[_._v("以上内容基本都是摘自《UNIX编程艺术》，这些并不是一种强制的规则或者必须遵守的条条框框。毕竟软件技术在不断发展，时代对于程序的需求也在不断的变化。但这些都是很多前辈在计算机软件的开发过程中的总结，并在他们自己所作所为中体现出来的。所以，带着敬意还有理性，来了解和学习这些前辈的经验，并实践之。")])])}],!1,null,null,null);t.options.__file="PhilOverview.md";v.default=t.exports}}]);