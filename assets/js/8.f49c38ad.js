(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{150:function(t,e,a){"use strict";a.r(e);var i=a(0),n=Object(i.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"unix哲学模块原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#unix哲学模块原则","aria-hidden":"true"}},[t._v("#")]),t._v(" Unix哲学模块原则")]),t._v(" "),a("h2",{attrs:{id:"《unix编辑艺术》读书笔记"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#《unix编辑艺术》读书笔记","aria-hidden":"true"}},[t._v("#")]),t._v(" "),a("em",[t._v("《UNIX编辑艺术》读书笔记")])]),t._v(" "),a("h2",{attrs:{id:"【声明】读书笔记包括原文摘抄和个人思考心得，原文一切版权归本书作者所有"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#【声明】读书笔记包括原文摘抄和个人思考心得，原文一切版权归本书作者所有","aria-hidden":"true"}},[t._v("#")]),t._v(" "),a("em",[t._v("【声明】读书笔记包括原文摘抄和个人思考心得，原文一切版权归本书作者所有")])]),t._v(" "),a("blockquote",[a("p",[t._v("使用简洁的接口拼合简单的部件")])]),t._v(" "),a("p",[t._v("正文摘抄：")]),t._v(" "),a("ol",[a("li",[t._v("计算机编程的本质就是控制复杂度 —Brian Kernighan。")]),t._v(" "),a("li",[t._v("排错往往占了大部分的开发时间，弄出一个拿得出手的可用系统，通常与其说出自才华横溢的设计成果，还不如说是跌跌撞撞的结果。")]),t._v(" "),a("li",[t._v("要编制复杂软件而又不至于一败涂地的唯一方法就是降低其整体的复杂度 — 用清晰的接口把若干简单的模块组合成一个复杂软件。如此一来，多数问题就只会局限于某个局部，那么就还有希望对局部进行改进而不至牵动全身")])]),t._v(" "),a("p",[t._v("自我理解和感受：\n模块化这个原则其实到处都有听说过，也理想着在工作中实践之，只是实践途中总有些偏差。开发之前对于模块的准确划分，优秀的模块设计，开发过程中参与人员的准确理解。这些往往因为工期紧急（仓促设计），前期本身对于业务或者目标的不够熟悉，或者开发人员的理解偏差（开发流程不够规范）都会是产生偏差的原因。也许这也是“搬砖的”跟“工程师”的差别吧，仍需努力！！")])])}],!1,null,null,null);n.options.__file="PhilModel.md";e.default=n.exports}}]);